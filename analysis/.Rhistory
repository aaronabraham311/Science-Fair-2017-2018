metric <- (tp + tn)/(tp + fp + fn + tn)
return(metric)
}
mccMetric <- function (conMatrix) {
tp <- conMatrix[1,1]
fp <- conMatrix[1,2]
fn <- conMatrix[2,1]
tn <- conMatrix[2,2]
metric <- ((tp * tn) - (fp * fn))/(sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn)))
return(metric)
}
rfPredictions <- predict(rfmodel, test)
confMatrixrf <- table(predictions = rfPredictions, actual = test$Group)
rfAccuracy <- accuracyMetric(confMatrixrf)
confMatrixrf <- table(predictions = rfPredictions, actual = test$Name)
rfAccuracy <- accuracyMetric(confMatrixrf)
rfMCC <- mccMetric(confMatrixrf)
confMatrixrf
readRDS("rf_brain&metabolite.RDS", rfmodel)
writeRDS("rf_brain&metabolite.RDS", rfmodel)
write_rds("rf_brain&metabolite.RDS", rfmodel)
?write_rds
write_rds(rfmodel, "rf_brain&metabolite.RDS")
library(tidyverse)
library(caret)
library(gridExtra)
brain_vol_data <- read.csv("data/brainVolume.csv")
metabolite_data <- read.csv("data/final_data.csv")
brain_vol_dataNorm <- as.data.frame(scale(brain_vol_data))
bss <- numeric()
wss <- numeric()
for(i in 1:10){
# For each k, calculate betweenss and tot.withinss
bss[i] <- kmeans(brain_vol_dataNorm, centers=i)$betweenss
wss[i] <- kmeans(brain_vol_dataNorm, centers=i)$tot.withinss
}
p3 <- qplot(1:10, bss, geom=c("point", "line"),
xlab="Number of clusters", ylab="Between-cluster sum of squares") +
scale_x_continuous(breaks=seq(0, 10, 1))
p4 <- qplot(1:10, wss, geom=c("point", "line"),
xlab="Number of clusters", ylab="Total within-cluster sum of squares") +
scale_x_continuous(breaks=seq(0, 10, 1))
grid.arrange(p3, p4, ncol=2)
ggplot(brain_vol_dataNorm, aes(BrainSegVolNotVent.mm3, estimated.total.intracranial.volume.mm3,
color = factor(brain_vol_cluster$cluster))) + geom_point() + ggtitle("Clusters") + labs(x = "BrainSegVolNotVent", y = "Estimated Total Intracranial Volume", colour = "Clusters")
brain_vol_cluster <- kmeans(brain_vol_dataNorm, centers = 5)
write_rds(brain_vol_cluster, "clusters.rds")
testObject <- readRDS("clusters.rds")
class(testObject)
ggplot(brain_vol_dataNorm, aes(BrainSegVolNotVent.mm3, estimated.total.intracranial.volume.mm3,
color = factor(brain_vol_cluster$cluster))) + geom_point() + ggtitle("Clusters") + labs(x = "BrainSegVolNotVent", y = "Estimated Total Intracranial Volume", colour = "Clusters")
brain_vol_cluster <- kmeans(brain_vol_dataNorm, centers = 4)
ggplot(brain_vol_dataNorm, aes(BrainSegVolNotVent.mm3, estimated.total.intracranial.volume.mm3,
color = factor(brain_vol_cluster$cluster))) + geom_point() + ggtitle("Clusters") + labs(x = "BrainSegVolNotVent", y = "Estimated Total Intracranial Volume", colour = "Clusters")
write_rds(brain_vol_cluster, "clusters.rds")
testObject <- readRDS("clusters.rds")
plot(brain_vol_dataNorm[c("BrainSegVolNotVent.mm3", "estimated.total.intracranial.volume.mm3")],
col = brain_vol_cluster$cluster)
ggplot(brain_vol_dataNorm, aes(BrainSegVolNotVent.mm3, estimated.total.intracranial.volume.mm3,
color = factor(brain_vol_cluster$cluster))) + geom_point() + ggtitle("Clusters") + labs(x = "BrainSegVolNotVent", y = "Estimated Total Intracranial Volume", colour = "Clusters")
plot(brain_vol_dataNorm[c("BrainSegVolNotVent.mm3", "estimated.total.intracranial.volume.mm3")],
col = brain_vol_cluster$cluster)
table(metabolite_data$Group, brain_vol_cluster$cluster)
metabolite_data$Group
class(brain_vol_cluster$cluster)
table(metabolite_data$Group, factor(brain_vol_cluster$cluster)
table(metabolite_data$Group, factor(brain_vol_cluster$cluster)
table(metabolite_data$Group, factor(brain_vol_cluster$cluster)
table(metabolite_data$Group, factor(brain_vol_cluster$cluster))
factored_clusters <- factor(brain_vol_cluster$cluster)
table(metabolite_data$Group, factored_clusters)
newdf <- data.frame(metabolite_data$Group, brain_vol_cluster$cluster)
$brain_vol_cluster
View(brain_vol_data)
View(metabolite_data)
df <- read.csv("data/brain_volume_mlData.csv")
View(df)
metabolite_data <- subset(df, 1, 7:10)
?subset
names(df)
metabolite_data <- subset(df, names %in% df)
metabolite_data <- df[,names]
metabolite_data <- df[, c("ptid", "lh_MeanThickness_thickness.mm", "rh_MeanThickness_thickness.mm", "BrainSegVolNotVent.mm3", "estimated.total.intracranial.volume.mm3")]
metabolite_data <- df[,c("ptid", "lh_MeanThickness_thickness.mm", "rh_MeanThickness_thickness.mm", "BrainSegVolNotVent.mm3", "estimated.total.intracranial.volume.mm3")]
metabolite_data <- df[,c("Subject.ID", "lh_MeanThickness_thickness.mm", "rh_MeanThickness_thickness.mm", "BrainSegVolNotVent.mm3", "estimated.total.intracranial.volume.mm3")]
brain_vol_data <- df[,c("Subject.ID", "lh_MeanThickness_thickness.mm", "rh_MeanThickness_thickness.mm", "BrainSegVolNotVent.mm3", "estimated.total.intracranial.volume.mm3")]
brain_vol_dataNorm <- as.data.frame(scale(brain_vol_data))
ss <- numeric()
wss <- numeric()
bss <- numeric()
wss <- numeric()
for(i in 1:10){
# For each k, calculate betweenss and tot.withinss
bss[i] <- kmeans(brain_vol_dataNorm, centers=i)$betweenss
wss[i] <- kmeans(brain_vol_dataNorm, centers=i)$tot.withinss
}
p3 <- qplot(1:10, bss, geom=c("point", "line"),
xlab="Number of clusters", ylab="Between-cluster sum of squares") +
scale_x_continuous(breaks=seq(0, 10, 1))
p4 <- qplot(1:10, wss, geom=c("point", "line"),
xlab="Number of clusters", ylab="Total within-cluster sum of squares") +
scale_x_continuous(breaks=seq(0, 10, 1))
grid.arrange(p3, p4, ncol=2)
brain_vol_cluster <- kmeans(brain_vol_dataNorm, centers = 5) #Read in
write_rds(brain_vol_cluster, "cluster.rds")
ggplot(brain_vol_dataNorm, aes(BrainSegVolNotVent.mm3, estimated.total.intracranial.volume.mm3,
color = factor(brain_vol_cluster$cluster))) + geom_point() + ggtitle("Clusters") + labs(x = "BrainSegVolNotVent", y = "Estimated Total Intracranial Volume", colour = "Clusters")
newdf <- data.frame(metabolite_data$Group, brain_vol_cluster$cluster)
newdf <- data.frame(df$Group, brain_vol_cluster$cluster)
newdf <- data.frame(df$Name, brain_vol_cluster$cluster)
newdf
df$Name <- factor(df$Name)
newdf <- data.frame(df$Name, brain_vol_cluster$cluster)
newdf
kClusters <- factor(brain_vol_cluster$cluster)
newdf <- data.frame(df$Name, kClusters)
newdf
class(df$Name)
newdf <- data.frame(kClusters, df$Name)
newdf
summarizedResults <- table(df$Name, kClusters)
summarizedResults
ggplot(df, aes(kClusters, df$BrainSegVolNotVent.mm3)) + geom_bar()
ggplot(df, aes(kClusters, BrainSegVolNotVent.mm3)) + geom_bar()
ggplot(df, aes(kClusters, BrainSegVolNotVent.mm3)) + geom_bar(stat = "identity")
ggplot(df, aes(kClusters, BrainSegVolNotVent.mm3, color = kClusters)) + geom_bar(stat = "identity")
ggplot(df, aes(kClusters, BrainSegVolNotVent.mm3, fill = kClusters)) + geom_bar(stat = "identity")
ggplot(df, aes(kClusters, BrainSegVolNotVent.mm3, fill = kClusters)) +
geom_bar(stat = "identity") + ggtitle("BrainSegNotVent Per Cluster") + labs(x = "Cluster", y = "Total Brain Volume", colour = "Cluster")
ggplot(df, aes(kClusters, BrainSegVolNotVent.mm3, fill = kClusters)) +
geom_bar(stat = "identity") + ggtitle("Total Brain Volume Per Cluster") + labs(x = "Cluster", y = "Total Brain Volume", colour = "Cluster")
names(df)
ggplot(df, aes(kClusters, lh_MeanThickness_thickness.mm, fill = kClusters)) +
geom_bar(stat = "identity") + ggtitle("Total Brain Volume Per Cluster") + labs(x = "Cluster", y = "Total Brain Volume", colour = "Cluster")
ggplot(df, aes(kClusters, lh_MeanThickness_thickness.mm, fill = kClusters)) +
geom_bar(stat = "identity") + ggtitle("Left Hemisphere Mean Cortical Thickness Per Cluster") + labs(x = "Cluster", y = "Left Hemisphere Mean Cortical Thickness", colour = "Cluster")
ggplot(df, aes(kClusters, lh_MeanThickness_thickness.mm, fill = kClusters)) +
geom_bar(stat = "identity") + ggtitle("Left Hemisphere Mean Cortical Thickness Per Cluster") + labs(x = "Cluster", y = "Left Hemisphere Mean Cortical Thickness", color = "Cluster")
ggplot(brain_vol_dataNorm, aes(BrainSegVolNotVent.mm3, estimated.total.intracranial.volume.mm3,
color = factor(brain_vol_cluster$cluster))) + geom_point() + ggtitle("Clusters") + labs(x = "BrainSegVolNotVent", y = "Estimated Total Intracranial Volume", colour = "Clusters")
ggplot(df, aes(kClusters, lh_MeanThickness_thickness.mm, fill = kClusters)) +
geom_bar(stat = "identity") + ggtitle("Left Hemisphere Mean Cortical Thickness Per Cluster") + labs(x = "Cluster", y = "Left Hemisphere Mean Cortical Thickness", colour = "Cluster")
ggplot(df, aes(kClusters, lh_MeanThickness_thickness.mm, fill = kClusters)) +
geom_bar(stat = "identity") + ggtitle("Left Hemisphere Mean Cortical Thickness Per Cluster") + labs(x = "Cluster", y = "Left Hemisphere Mean Cortical Thickness", color = "Cluster")
ggplot(df, aes(kClusters, rh_MeanThickness_thickness.mm, fill = kClusters)) +
geom_bar(stat = "identity") + ggtitle("Right Hemisphere Mean Cortical Thickness Per Cluster") + labs(x = "Cluster", y = "Right Hemisphere Mean Cortical Thickness", color = "Cluster")
ggplot(df, aes(kClusters, estimated.total.intracranial.volume.mm3, fill = kClusters)) +
geom_bar(stat = "identity") + ggtitle("Total Skull Volume Per Cluster") + labs(x = "Cluster", y = "Total Skull Volume", color = "Cluster")
plot(varImp(rfmodel), main = "Variable Importance - Random Forest with Metabolites and Brain Volume")
rfmodel <- readRDS("rf_brain&metabolite.rds")
plot(varImp(rfmodel), main = "Variable Importance - Random Forest with Metabolites and Brain Volume")
# Including libraries
library(tidyverse)
library(reshape2)
library(caret)
# Loading in dataset
data <- read.csv("data/brain_volume_mlData.csv")
# Dropping subject id column
drops <- c("Subject.ID")
data <- data[,!(names(data) %in% drops)]
set.seed(123)
data$Name <- as.factor(data$Name)
indices <- createDataPartition(data$Name, p = 0.7, list = FALSE) #70% of data will be for training
train <- data[indices,]
test <- data[-indices,]
controlParameters <- trainControl(
method = "LOOCV", #Leave one out cross validation
savePrediction = TRUE,
classProbs = TRUE
)
accuracyMetric <- function (conMatrix) {
tp <- conMatrix[1,1]
fp <- conMatrix[1,2]
fn <- conMatrix[2,1]
tn <- conMatrix[2,2]
metric <- (tp + tn)/(tp + fp + fn + tn)
return(metric)
}
mccMetric <- function (conMatrix) {
tp <- conMatrix[1,1]
fp <- conMatrix[1,2]
fn <- conMatrix[2,1]
tn <- conMatrix[2,2]
metric <- ((tp * tn) - (fp * fn))/(sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn)))
return(metric)
}
logmodel <- train(Group ~ .,
data = train,
method = "glm",
family = "binomial",
trControl = controlParameters)
logmodel <- train(Name ~ .,
data = train,
method = "glm",
family = "binomial",
trControl = controlParameters)
logPredictions <- predict(logmodel, test)
confMatrixlog <- table(predictions = logPredictions, actual = test$Group)
logAccuracy <- accuracyMetric(confMatrixlog)
logMCC <- mccMetric(confMatrixlog)
confMatrixlog <- table(predictions = logPredictions, actual = test$Name)
logAccuracy <- accuracyMetric(confMatrixlog)
logMCC <- mccMetric(confMatrixlog)
write_rds(logmodel, "log_brain&metabolite.rds")
confMatrixlog
CARTmodel <- train(Name ~.,
data = train,
method = "rpart",
trControl = controlParameters
)
rpart.plot::rpart.plot(CARTmodel$finalModel)
cartPredictions <- predict(CARTmodel, test)
confMatrixCART <- table(predictions = cartPredictions, actual = test$Name)
cartAccuracy <- accuracyMetric(confMatrixCART)
cartMCC <- mccMetric(confMatrixCART)
CARTmodel$modelInfo
CARTmodel$finalModel
write_rds(CARTmodel, "cart_brain&metabolite.rds")
confMatrixCART
parameterGrid <- expand.grid(k = c(2,3,4,5,6,7,8,9,10))
knnModel <- train(Name ~ .,
data = train,
method = "knn",
trControl = controlParameters,
tuneGrid = parameterGrid)
knnPredictions <- predict(knnModel, test)
confMatrixKNN <- table(predictions = knnPredictions, actual = test$Name)
knnAccuracy <- accuracyMetric(confMatrixKNN)
knnMCC <- mccMetric(confMatrixKNN)
write_rds(knnModel, "knn_brain&metabolite.rds")
confMatrixKNN
parameterGrid <- expand.grid(C = c(0.1,0.2,0.3,0.4,0.5,0.6,0.6,0.7,0.8,0.9,1), sigma = 0.5)
svmModel <- train (Name ~ .,
data = train,
method = "svmRadial",
trControl = controlParameters,
tuneGrid = parameterGrid)
svmModel <- readRDS("svm_model.RDS")
svmPredictions <- predict(svmModel, test)
confMatrixSVM <- table(predictions = svmPredictions, actual = test$Name)
svmAccuracy <- accuracyMetric(confMatrixSVM)
svmMCC <- mccMetric(confMatrixSVM)
confMatrixSVM
cartPredictions <- predict(CARTmodel, train)
knnPredictions <- predict(knnModel, train)
logPredictions <- predict(logmodel, train)
rfPredictions <- predict(rfmodel, train)
svmPredictions <- predict(svmModel, train)
test$cartPredictions <- predict(CARTmodel, test)
test$knnPredictions <- predict(knnModel, test)
test$logPredictions <- predict(logmodel, test)
test$rfPredictions <- predict(rfmodel, test)
test$svmPredictions <- predict(svmModel, test)
predDF <- data.frame(cartPredictions, knnPredictions, logPredictions, rfPredictions, svmPredictions, class = train$Name)
combineModel <- train(as.factor(Name) ~., method = "rf", data = predDF, trControl = controlParameters)
combineModel <- train(as.factor(class) ~., method = "rf", data = predDF, trControl = controlParameters)
write_rds("svm_brain&metabolite.rds")
write_rds(svmModel, "svm_brain&metabolite.rds")
write_rds(combineModel, "ensemble_brain&metabolite.rds")
ensemblePredct <- predict(combineModel, test)
confMatrixEnsemble <- table(predictions = ensemblePredct, actual = test$Name)
ensembleAccuracy <- accuracyMetric(confMatrixEnsemble)
ensembleMCC <- mccMetric(confMatrixEnsemble)
confMatrixEnsemble
names(data)
data <- read.csv("data/brain_volume_mlData.csv")
names(data)
drops <- c("Subject.ID", "Arginine", "Citrulline", "Ornithine", "Proline")
data <- data[,!(names(data) %in% drops)]
set.seed(123)
data$Name <- as.factor(data$Name)
indices <- createDataPartition(data$Name, p = 0.7, list = FALSE) #70% of data will be for training
train <- data[indices,]
test <- data[-indices,]
train <- train[sample(nrow(train)),] # Mixing up rows to remove any patterns
controlParameters <- trainControl(
method = "LOOCV", #Leave one out cross validation
savePrediction = TRUE,
classProbs = TRUE
)
parameterGrid <- data.frame(mtry = c(2,3,4)) # Parameter for optimization: https://stats.stackexchange.com/questions/102867/random-forest-mtry-question
accuracyMetric <- function (conMatrix) {
tp <- conMatrix[1,1]
fp <- conMatrix[1,2]
fn <- conMatrix[2,1]
tn <- conMatrix[2,2]
metric <- (tp + tn)/(tp + fp + fn + tn)
return(metric)
}
mccMetric <- function (conMatrix) {
tp <- conMatrix[1,1]
fp <- conMatrix[1,2]
fn <- conMatrix[2,1]
tn <- conMatrix[2,2]
metric <- ((tp * tn) - (fp * fn))/(sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn)))
return(metric)
}
rfmodel <- train(Name ~.,
data = train,
method = "rf",
trControl = controlParameters,
tuneGrid = parameterGrid
)
write_rds(rfmodel, "rf_brain.rds")
rfPredictions <- predict(rfmodel, test)
confMatrixrf <- table(predictions = rfPredictions, actual = test$Name)
rfAccuracy <- accuracyMetric(confMatrixrf)
rfMCC <- mccMetric(confMatrixrf)
confMatrixrf
plot(varImp(rfmodel), main = "Variable Importance - Random Forest with Brain Volume")
rfmodel <- train(Name ~.,
data = train,
method = "rf",
trControl = controlParameters,
tuneGrid = parameterGrid
)
rfPredictions <- predict(rfmodel, test)
confMatrixrf <- table(predictions = rfPredictions, actual = test$Name)
confMatrixrf
names(train)
logmodel <- train(Name ~ .,
data = train,
method = "glm",
family = "binomial",
trControl = controlParameters)
logPredictions <- predict(logmodel, test)
confMatrixlog <- table(predictions = logPredictions, actual = test$Name)
logAccuracy <- accuracyMetric(confMatrixlog)
logMCC <- mccMetric(confMatrixlog)
write_rds(logmodel)
write_rds(logmodel, "log_brain.rds")
confMatrixlog
CARTmodel <- train(Name ~.,
data = train,
method = "rpart",
trControl = controlParameters
)
rpart.plot::rpart.plot(CARTmodel$finalModel)
cartPredictions <- predict(CARTmodel, test)
confMatrixCART <- table(predictions = cartPredictions, actual = test$Name)
cartAccuracy <- accuracyMetric(confMatrixCART)
cartMCC <- mccMetric(confMatrixCART)
confMatrixCART
parameterGrid <- expand.grid(k = c(2,3,4,5,6,7,8,9,10))
knnModel <- train(Name ~ .,
data = train,
method = "knn",
trControl = controlParameters,
tuneGrid = parameterGrid)
write_rds(CARTmodel, "cart_brain.rds")
write_rds(knnModel, "knn_brain.rds")
knnPredictions <- predict(knnModel, test)
confMatrixKNN <- table(predictions = knnPredictions, actual = test$Name)
confMatrixKNN
knnAccuracy <- accuracyMetric(confMatrixKNN)
knnMCC <- mccMetric(confMatrixKNN)
parameterGrid <- expand.grid(C = c(0.1,0.2,0.3,0.4,0.5,0.6,0.6,0.7,0.8,0.9,1), sigma = 0.5)
svmModel <- train (Name ~ .,
data = train,
method = "svmRadial",
trControl = controlParameters,
tuneGrid = parameterGrid)
write_rds(svmModel, "svm_brain.rds")
svmPredictions <- predict(svmModel, test)
confMatrixSVM <- table(predictions = svmPredictions, actual = test$Name)
confMatrixSVM
svmAccuracy <- accuracyMetric(confMatrixSVM)
svmMCC <- mccMetric(confMatrixSVM)
cartPredictions <- predict(CARTmodel, train)
knnPredictions <- predict(knnModel, train)
logPredictions <- predict(logmodel, train)
rfPredictions <- predict(rfmodel, train)
svmPredictions <- predict(svmModel, train)
test$cartPredictions <- predict(CARTmodel, test)
test$knnPredictions <- predict(knnModel, test)
test$logPredictions <- predict(logmodel, test)
test$rfPredictions <- predict(rfmodel, test)
test$svmPredictions <- predict(svmModel, test)
predDF <- data.frame(cartPredictions, knnPredictions, logPredictions, rfPredictions, svmPredictions, class = train$Name)
combineModel <- train(as.factor(class) ~., method = "rf", data = predDF, trControl = controlParameters)
write_rds(combineModel, "ensemble_brain.rds")
ensemblePredct <- predict(combineModel, test)
confMatrixEnsemble <- table(predictions = ensemblePredct, actual = test$Name)
ensembleAccuracy <- accuracyMetric(confMatrixEnsemble)
ensembleMCC <- mccMetric(confMatrixEnsemble)
ensembleModel <- read.rds("ensemble_brain&metabolite.rds")
library(tidyverse)
library(reshape2)
library(caret)
ensembleModel <- read.rds("ensemble_brain&metabolite.rds")
ensembleModel <- readRDS("ensemble_brain&metabolite.rds")
vars <- varImp(ensembleModel)
vars
rf <- readRDS("rf_brain&metabolite.rds")
vars <- varImp(rf)
vars
vars[,2]
vars[1,2]
vars[1]
vars[2]
vars[1]$importance
vars <- ars[1]$importance
vars <- vars[1]$importance
vars[1:5,]
vars[1]
vars
vars[1,2
]
vars[1,1]
var[1,0]
vars <- varImp(rf)
plot(varImp)
plot(vars)
plot(vars) + main("Variable Importance - Combined RF Model")
?plot
plot(vars, main = "Variable Importance - Combined RF Model")
plot(vars, main = "Variable Importance - Combined Random Forest Model")
?confusionMatrix
??confusionMatrix
# Including libraries
library(caret)
library(tidyverse)
# Loading in dataset
data <- read.csv("data/brain_volume_mlData.csv")
# Dropping subject id column
drops <- c("Subject.ID")
data <- data[,!(names(data) %in% drops)]
#Setting seed for reproducibility
set.seed(123)
#Factoring classes and splitting data into testing and training
data$Name <- as.factor(data$Name)
indices <- createDataPartition(data$Name, p = 0.7, list = FALSE) #70% of data will be for training
train <- data[indices,]
test <- data[-indices,]
train <- train[sample(nrow(train)),]
knn_metabolite <- readRDS("loocv_knn.rds")
knn_metabolitePred <- predict(knn_metabolite, test)
knn_metaboliteCM <- confusionMatrix(knn_metabolitePred, test)
class(knn_metabolitePred
)
knn_metaboliteCM <- confusionMatrix(knn_metabolitePred, test$Name)
knn_metaboliteCM
data <- read.csv("data/arginine-data.csv")
data <- read.csv("data/arginine-data.csv")
data <- read.csv("data/arginine_data.csv")
head(data)
ggplot(data, aes(Name, Arginine)) + ggboxplot()
library(ggplot2)
ggplot(data, aes(Name, Arginine)) + ggboxplot()
ggplot(data, aes(Name, Arginine)) + geom_boxplot()
ggplot(data, aes(Name, Ornithine)) + geom_boxplot()
ggplot(data, aes(Name, Citrulline)) + geom_boxplot()
ggplot(data, aes(Name, Proline)) + geom_boxplot()
ggplot(data, aes(Name, Arginine)) + geom_boxplot(fill = aes(Name))
ggplot(data, aes(Name, Arginine), color = Name) + geom_boxplot()
ggplot(data, aes(Name, Arginine, fill = Name)) + geom_boxplot()
ggplot(data, aes(Name, Arginine, fill = Name)) + geom_boxplot() + ggtitle(main = "L-arginine concentrations in AD, CAA and healthy subjects")
ggplot(data, aes(Name, Arginine, fill = Name)) + geom_boxplot() + ggtitle("L-arginine concentrations in AD, CAA and healthy subjects")
ggplot(data, aes(Name, Arginine, fill = Name)) + geom_boxplot() + ggtitle("L-arginine concentrations in AD, CAA and healthy subjects")
ggplot(data, aes(Name, Ornithine, fill = Name)) + geom_boxplot() + ggtitle("Ornithine concentrations in AD, CAA and healthy subjects")
ggplot(data, aes(Name, Citrulline, fill = Name)) + geom_boxplot() + ggtitle("Citrulline concentrations in AD, CAA and healthy subjects")
ggplot(data, aes(Name, Proline, fill = Name)) + geom_boxplot()+ ggtitle("Proline concentrations in AD, CAA and healthy subjects")
ggplot(data, aes(Name, Arginine, fill = Name)) + geom_boxplot() + ggtitle("L-arginine concentrations in AD, CAA and healthy subjects")
ggplot(data, aes(Name, Citrulline, fill = Name)) + geom_boxplot() + ggtitle("Citrulline concentrations in AD, CAA and healthy subjects")
ggplot(data, aes(Name, Ornithine, fill = Name)) + geom_boxplot() + ggtitle("Ornithine concentrations in AD, CAA and healthy subjects")
ggplot(data, aes(Name, Proline, fill = Name)) + geom_boxplot()+ ggtitle("Proline concentrations in AD, CAA and healthy subjects")
library(tidyverse)
library(reshape2)
library(fmsb)
data <- read.csv("data/arginine_data.csv")
adData <- data %>% filter(Name == "AD") %>% select ("Name", "Arginine", "Citrulline", "Ornithine", "Proline")
caaData <- data %>% filter(Name == "CAA") %>% select ("Arginine", "Citrulline", "Ornithine", "Proline")
controlData <- data %>% filter(Name == "CONTROL") %>% select ("Name", "Arginine", "Citrulline", "Ornithine", "Proline")
data <- rbind(adData, controlData)
data$Name <- factor(data$Name)
pArg <- t.test(arginineAD, arginineControl)
arginineAD <- adData%>% select ("Arginine") %>% unlist
citrullineAD <- adData %>% select ("Citrulline") %>% unlist
ornithineAD <- adData %>% select ("Ornithine") %>% unlist
prolineAD <- adData %>% select ("Proline") %>% unlist
arginineControl <- controlData%>% select ("Arginine") %>% unlist
citrullineControl <- controlData %>% select ("Citrulline") %>% unlist
ornithineControl <- controlData %>% select ("Ornithine") %>% unlist
prolineControl <- controlData %>% select ("Proline") %>% unlist
pArg <- t.test(arginineAD, arginineControl)
pArg
library(tidyverse)
library(reshape2)
library(fmsb)
data <- read.csv("data/arginine_data.csv")
adData <- data %>% filter(Name == "AD") %>% select ("Name", "Arginine", "Citrulline", "Ornithine", "Proline")
caaData <- data %>% filter(Name == "CAA") %>% select ("Arginine", "Citrulline", "Ornithine", "Proline")
controlData <- data %>% filter(Name == "CONTROL") %>% select ("Name", "Arginine", "Citrulline", "Ornithine", "Proline")
data <- rbind(adData, controlData)
data$Name <- factor(data$Name)
# AD means and standard deviations
arginineAD <- adData%>% select ("Arginine") %>% unlist
citrullineAD <- adData %>% select ("Citrulline") %>% unlist
ornithineAD <- adData %>% select ("Ornithine") %>% unlist
prolineAD <- adData %>% select ("Proline") %>% unlist
arginineControl <- controlData%>% select ("Arginine") %>% unlist
citrullineControl <- controlData %>% select ("Citrulline") %>% unlist
ornithineControl <- controlData %>% select ("Ornithine") %>% unlist
prolineControl <- controlData %>% select ("Proline") %>% unlist
pArg <- t.test(arginineAD, arginineControl)
pArg
pOrn <- t.test(ornithineAD, ornithineControl, var.equal = TRUE)
pCit <- t.test(citrullineAD, citrullineControl, var.equal = TRUE)
pProEqual <- t.test(prolineAD, prolineControl, var.equal = TRUE)
pProUnequal <- t.test(prolineAD, prolineControl)
pCir
pCit
