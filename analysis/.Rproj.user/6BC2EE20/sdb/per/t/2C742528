{
    "collab_server" : "",
    "contents" : "# Including libraries\nlibrary(tidyverse)\nlibrary(reshape2)\nlibrary(caret)\n\n# Loading in dataset\ndata <- read.csv(\"data/brain_volume_mlData.csv\")\n\n# Dropping subject id column\ndrops <- c(\"Subject.ID\", \"Arginine\", \"Citrulline\", \"Ornithine\", \"Proline\")\ndata <- data[,!(names(data) %in% drops)]\n\n#Setting seed for reproducibility \nset.seed(123)\n\n#Factoring classes and splitting data into testing and training\ndata$Name <- as.factor(data$Name)\n\nindices <- createDataPartition(data$Name, p = 0.7, list = FALSE) #70% of data will be for training\ntrain <- data[indices,]\ntest <- data[-indices,]\n\ntrain <- train[sample(nrow(train)),] # Mixing up rows to remove any patterns\n\n# Control parameters\ncontrolParameters <- trainControl(\n  method = \"LOOCV\", #Leave one out cross validation\n  savePrediction = TRUE,\n  classProbs = TRUE\n)\n\nparameterGrid <- data.frame(mtry = c(2,3,4)) # Parameter for optimization: https://stats.stackexchange.com/questions/102867/random-forest-mtry-question\n\naccuracyMetric <- function (conMatrix) {\n  tp <- conMatrix[1,1]\n  fp <- conMatrix[1,2]\n  fn <- conMatrix[2,1]\n  tn <- conMatrix[2,2]\n  \n  metric <- (tp + tn)/(tp + fp + fn + tn)\n  return(metric)\n}\n\nmccMetric <- function (conMatrix) {\n  tp <- conMatrix[1,1]\n  fp <- conMatrix[1,2]\n  fn <- conMatrix[2,1]\n  tn <- conMatrix[2,2]\n  \n  metric <- ((tp * tn) - (fp * fn))/(sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn)))\n  return(metric)\n}\n\n# Random forest\nrfmodel <- train(Name ~.,\n                 data = train,\n                 method = \"rf\",\n                 trControl = controlParameters,\n                 tuneGrid = parameterGrid\n)\n\nrfPredictions <- predict(rfmodel, test)\nconfMatrixrf <- table(predictions = rfPredictions, actual = test$Name)\nrfAccuracy <- accuracyMetric(confMatrixrf)\nrfMCC <- mccMetric(confMatrixrf)\n\nplot(varImp(rfmodel), main = \"Variable Importance - Random Forest with Brain Volume\")\n\n# Logistic regression\nlogmodel <- train(Name ~ .,\n                  data = train,\n                  method = \"glm\",\n                  family = \"binomial\",\n                  trControl = controlParameters)\nlogPredictions <- predict(logmodel, test)\nconfMatrixlog <- table(predictions = logPredictions, actual = test$Name)\nlogAccuracy <- accuracyMetric(confMatrixlog)\nlogMCC <- mccMetric(confMatrixlog)\n\n#CART Model\nCARTmodel <- train(Name ~.,\n                   data = train,\n                   method = \"rpart\",\n                   trControl = controlParameters\n)\n\nrpart.plot::rpart.plot(CARTmodel$finalModel)\n\ncartPredictions <- predict(CARTmodel, test)\nconfMatrixCART <- table(predictions = cartPredictions, actual = test$Name)\ncartAccuracy <- accuracyMetric(confMatrixCART)\ncartMCC <- mccMetric(confMatrixCART)\n\n#KNN Model\nparameterGrid <- expand.grid(k = c(2,3,4,5,6,7,8,9,10))\n\nknnModel <- train(Name ~ .,\n                  data = train,\n                  method = \"knn\",\n                  trControl = controlParameters,\n                  tuneGrid = parameterGrid)\n\nknnPredictions <- predict(knnModel, test)\nconfMatrixKNN <- table(predictions = knnPredictions, actual = test$Name)\nknnAccuracy <- accuracyMetric(confMatrixKNN)\nknnMCC <- mccMetric(confMatrixKNN)\n\n#SVM Model\nparameterGrid <- expand.grid(C = c(0.1,0.2,0.3,0.4,0.5,0.6,0.6,0.7,0.8,0.9,1), sigma = 0.5)\n\nsvmModel <- train (Name ~ .,\n                   data = train,\n                   method = \"svmRadial\",\n                   trControl = controlParameters,\n                   tuneGrid = parameterGrid)\nsvmModel <- readRDS(\"svm_model.RDS\")\n\nsvmPredictions <- predict(svmModel, test)\nconfMatrixSVM <- table(predictions = svmPredictions, actual = test$Name)\nsvmAccuracy <- accuracyMetric(confMatrixSVM)\nsvmMCC <- mccMetric(confMatrixSVM)\n\n#Ensemble\ncartPredictions <- predict(CARTmodel, train)\nknnPredictions <- predict(knnModel, train)\nlogPredictions <- predict(logmodel, train)\nrfPredictions <- predict(rfmodel, train)\nsvmPredictions <- predict(svmModel, train)\n\ntest$cartPredictions <- predict(CARTmodel, test)\ntest$knnPredictions <- predict(knnModel, test)\ntest$logPredictions <- predict(logmodel, test)\ntest$rfPredictions <- predict(rfmodel, test)\ntest$svmPredictions <- predict(svmModel, test)\n\npredDF <- data.frame(cartPredictions, knnPredictions, logPredictions, rfPredictions, svmPredictions, class = train$Name)\n\ncombineModel <- train(as.factor(class) ~., method = \"rf\", data = predDF, trControl = controlParameters)\n\nensemblePredct <- predict(combineModel, test)\nconfMatrixEnsemble <- table(predictions = ensemblePredct, actual = test$Name)\nensembleAccuracy <- accuracyMetric(confMatrixEnsemble)\nensembleMCC <- mccMetric(confMatrixEnsemble)\n",
    "created" : 1524280544933.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1071833510",
    "id" : "2C742528",
    "lastKnownWriteTime" : 1524283157,
    "last_content_update" : 1524283157908,
    "path" : "~/Documents/Science Fair /Grade 11/Data Analysis/Data Analysis/brain_ml.r",
    "project_path" : "brain_ml.r",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}